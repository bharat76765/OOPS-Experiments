# Logging Integration for ALTA Backend

This document provides instructions for integrating and configuring the logging system in the Language Translation Application Backend. The logging system is designed to handle log rotation, upload logs to Azure Blob Storage, and manage local log files efficiently.

## Overview

The logging system in this project is configured to:

- Rotate log files every 24 hours.
- Keep only the latest 3 log files locally.
- Upload log files to Azure Blob Storage for persistent storage.
- Retry uploads if a file is locked.

## Prerequisites

- Python 3.x
- Azure Storage Account
- Azure Storage Blob Service Client
- Python packages: `azure-storage-blob`, `python-dotenv`

## Installation

1. **Clone the Repository:**

   ```bash
   git clone <repository-url>
   cd <repository-directory>
   ```

2. **Install Required Packages:**

   Ensure you have the necessary Python packages installed. You can use `pip` to install them:

   ```bash
   pip install azure-storage-blob python-dotenv
   ```

3. **Environment Configuration:**

   Create a `.env` file in the root directory of your project and add your Azure Storage connection string:

   ```
   AZURE_STORAGE_CONNECTION_STRING=your_azure_storage_connection_string
   ```

## Configuration

- **Log Directory:** Logs are stored in the `logs` directory. Ensure this directory exists or is created at runtime.
- **Azure Blob Storage:**
  - **Container Name:** `alta-logging`
  - **Blob Directory:** `log_directory`

## Usage

The logging system is initialized and started automatically when the application runs. It logs messages to a file and rotates the log file every 5 minutes. The old log files are uploaded to Azure Blob Storage and deleted locally to save space.

### Testing the Logging System

To test the logging system, run the application:

```bash
python logging_config.py
```

This will start the logging system, and you should see log entries being generated and uploaded to Azure Blob Storage.

## Troubleshooting

- **File Locked Error:** If a log file is locked during upload, the system will retry after 5 seconds.
- **Blob Already Exists:** If a log file already exists in Azure Blob Storage, it will be removed from pending uploads to avoid infinite retries.

## Conclusion

This logging integration provides a robust solution for managing log files in the Language Translation Application Backend. By following the steps outlined in this document, you can ensure that your application's logging is configured correctly and efficiently.
